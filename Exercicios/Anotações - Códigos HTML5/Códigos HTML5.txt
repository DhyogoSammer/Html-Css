! = É o primeiro passo para montar a estrutura do site
Em lang = colocar a tradução = pt-br
Em title = Colocar o Titulo do assunto que vai aparecer na barrinha do site 
Em cima de títutlo colocar o Favicon = O ícone do site = Digitar link:favicon, logo em seguida apertar Ctrl + Space e selecionar o ícone.
h1 = Serve para colocar o título do site principal
Ordem de nível = h1>h2>h3>h4>h5>h6 : Vai até o nível 6
p = paragrafo
Mark = marca texto 
strong = Colocar a palavra selecionada em negrito
em = colocar a palavra selecionada em itálico
Símbolos = &delta; por exemplo 
Emojis = &#x + Código da emojipedia
Imagens = img + Ctrl Space para selecionar a imagem
abbr = Coloca um significado na palavra, Por exemplo HTML (HyperText Markup Language)
br = Quebra um paragrafo
ins = Texto sublinhado 
del = Texto riscado / Deletado
sup = Coloca a palavra para cima : Por exemplo x3 
sub = Coloca a palavra para baixo 
big = Palavra grande : OBS : Já está caindo em desuso
small = Palavras pequenas
code = Coloca as palavras com a mesma largura e espaço entre cada letra
pre code = Organiza a palavra igual ta no vscode
q = Coloca a palavra entre aspas
blockquote = Serve para colocar a referência da citação
ol = Listas ordenadas = colocar type = Para escolher A,a,I, i ou o padrão que é 1.
li = Listas 
ul = Listas não ordenadas = Colocar type = Para escolher Circle, Square ou o padrão que é disc.
dl = Usado para listar uma lista de definição
dt = Usado para mostrar o termo
dd = Usado para descrever o termo
a = âncora, serve para colocar links externos
target = Depois do link colocar target =_blank 
rel = E logo em seguida colocar rel=external
Esses dois vão fazer com que o link seja aberto em outra guia sem fechar a guia do seu site 
./ = Signifca que o arquivo está na mesma pastaa
../ = Signifca que o arquivo está na pasta anterior
rel = next = Para link da página seguinte
rel = prev = Para link da página anterior
rel = nofollow = Para links que você não da aval para a página
target = self = Indica que o link vai ser aberto na mesma guia
&lt; = significa < 
&gt; = signifca >
id = Usado para selecionar algo e identificar.
Tab = Serve para desclocar o texto do html5 para a direita.
Shift + Tab = Serve para deslocar o texto do html5 para a esquerda.
*{} = Seleciona todas as tags do html e pode fazer alteração nelas.

Formulários : 
Os formulários devem estar dentro de:

	<form>	      </form>


Input de texto:	<input type="text" name=" " id=" ">

	Ex:	<form>
			<p>Nome: <input type="text" name="nome" id="nome"></p>
		</form>


Input de envio:	<input type="submit" value=" ">

	Ex:	<form>
			<p><input type="submit" value="Enviar"></p>
		</form>

Quando vamos preencher um formulário, ao clicarmos em determinadas caixas de texto é possível que o navegador do usuário auxilie da digitação dos dados com o a ferramenta "autocomplete" (preenchimento automático do campo). Quando essa ferramenta é ativada, uma janela com sugestões é exibida para que o usuário possa escolher algum dado... Acontece que em algumas situações pode ser que o autocomplete atrapalhe na visibilidade dos campos, poluindo o nosso formulário.

Nesses casos, se você quiser é possível desligar o autocomplete... Para fazer isso, dentro da tag de abertura do formulário (<form>), basta adicionar o parâmetro " autocomplete " com o valor "off".

PARA ONDE MANDAR OS DADOS DE UM FORMULÁRIO?

Depois que você criar um formulário simples em HTML, é possível preencher os campos e até mesmo clicar no botão "Enviar"... Entretanto os dados simplesmente somem ao clicar no botão. Para onde os dados de um formulário devem ir depois que o usuário faz a submissão? 

Normalmente nós vamos mandar e encaminhar os dados para alguma linguagem de programação, como por exemplo: ASP, Java, PHP, JavaScript e por aí vai...

Para de fato encaminhar os dados do formulário para alguma linguagem, dentro da tag de abertura do formulário (<form>), temos que configurar o atributo " action " (por padrão esse atributo já vem embutido dentro da tag form)... Como valor desse atributo, devemos inserir o nome do script que vai receber os dados (ex: cadastro.php).

Obs.: Sim, para poder cadastrar os dados do formulário, é necessário criar um script, um programa... Que terá como função justamente essa finalidade de cadastro.

Depois de configurar o atributo "action" especificando o script que vai receber os dados, a ação desse atributo só vai ser disparada (iniciando o envio dos dados do formulário) quando o usuário clicar no botão "Enviar" (input submit), no botão de submissão do form...

*Se você colocar como valor de "action" um nome fictício de um script que não existe, ao clicar em "Enviar" no formulário, simplesmente irá ocorrer um erro, já que o sistema não vai encontrar o arquivo desse script. 

INPUTS (COMPONENTE DE ENTRADA) E OS ATRIBUTOS "NAME" E "ID":

Na maioria dos tipos de input para formulários (componentes de entrada de dados), é necessário ter os atributos "name" e "id"... Ao inserir um componente, por padrão esses dois atributos já acompanham a tag de input. Você pode dar a mesma nomenclatura para ambos se quiser.

Sobre o parâmetro " name ", de certa maneira ele serve para identificar um elemento, assim como o parâmetro "id" faz...

De forma geral, pode-se dizer que:

ID: O id é importante para o browser (front-end), para a manipulação do DOM (arvore do documento), CSS e usado para criar o VÍNCULO entre a nossa label e o seu respectivo componente.

NAME: O name é importante para o servidor/linguagens de programação (back-end) e o HTML.

O name é principalmente usado para elementos do tipo input em forms, ou seja para campos de inserção de dados e é exatamente o name que identifica no servidor o campo.

Vale lembrar que o valor do id deve ser único para cada documento, já o valor do name pode ocorrer mais de uma vez por documento. 

Obs.: Como foi dito, o atributo name é muito usado na parte do servidor nas linguagens de programação, entretanto ele é mais útil especificamente para algumas linguagens, como o PHP por exemplo... Já para linguagens como o JavaScript, o id é mais utilizado, mesmo sendo para o servidor... (No JS até dá para identificar e puxar o campo usando o name, mas o id é o considerado padrão para a linguagem).

Dessa maneira, entenda que você sempre precisa identificar todos os inputs (componentes de entrada) do formulário com um name e com um id, ambos tem suas funções. (a única exceção para isso seria o botão de submissão, que mesmo sendo um input não necessita desses atributos de identificação, visto que não recebe dados e não tem etiqueta).

VÍNCULO ENTRE LABELS E COMPONENTES:

É muito importante que exista um vínculo entre a label e o seu respectivo componente... O navegador não é inteligente o suficiente para saber que determinada etiqueta está ligada a tal componente, por isso essa configuração de ligação deve ser feita...

Para fazer essa ligação, estabelecer esse vínculo entre a label e o componente, na tag da etiqueta <label> devemos usar o atributo " for " (por padrão esse atributo já vem embutido dentro da tag label).

Como valor de "for", você deve justamente inserir o nome do id do respectivo componente de entrada da label.

Obs.: Geralmente damos a mesma nomenclatura para o name e o id de um componente input, mas também existe a possibilidade de dar nomenclaturas diferentes para esses atributos.

Considerando que o atributo name e id do seu componente possuem nomenclaturas diferentes: Para o valor de "for", obrigatoriamente usamos sempre o id, visto que "for" só aceita o id para criar o vínculo entre a label e o respectivo input. (se as nomenclatura de name e id forem iguais, o 'for' usa o id do mesmo jeito).

Depois que você configurar o atributo "for" da sua label com o id do input, o vínculo entre essa label e o input estará firmado.

Nota: Não se cria um formulário sem relacionar o label ao input, é importantíssimo que você sempre estabeleça o vínculo. Caso contrário isso vai dificultar o trabalho dos mecanismos de busca, do HTML e consequentemente do seu navegador, visto que eles não irão saber qual caixa input está relacionada com qual label...

Depois de estabelecer o vínculo, visualmente o nosso formulário estará igual, no entanto a parte semântica estará funcionando adequadamente e é isso que mais importa.

Fora que, criando a ligação, ao clicar diretamente na label na página, a sua respectiva caixa de componente vinculada fica sinalizada e o cursor de texto da caixa (se for uma caixa de texto) é ativado, selecionando a caixa. 

Isso pode ser útil principalmente para usuários de celular, visto que a tela é menor e muitas vezes ocorre do user errar o clique com o dedo... Apertar num ponto específico no celular às vezes pode ser complicado, um label vinculado adequadamente significa uma área maior de sensibilidade, ajudando na experiência do usuário durante a utilização e preenchimento do formulário.

Resumo:
Existem dois métodos que são simples para  envio de formulário. São eles: method="GET" e method="POST"

o primeiro é o GET (padrão), é o método que coloca os dados do formulário na URL.

O método POST não deixa aparecer os dados digitados na URL

Lembre-se: os dados não estão 100% protegidos mesmo com o método POST, pois eles ainda podem aparecer no 'inspecionar > network > depois de digitar os dados no formulário e enviar > procure dentro de network o cadastro que vc fez > payload > vc vai achar os dados lá.

o POST nao protegeu os dados, ele apenas não mostrou os dados na URL. ainda dá pra capturar os dados se olhar dentro do corpo dos cabeçalhos das requisições da emissão dos dados. 
Pra proteger esses dados de fato, vc precisa criptografar, e pra isso se utiliza HTTPS (outro protocolo de transmissão de dados). Pois o HTTP é o q estamos utilizamos.

quando usar GET ou POST?

GET: basicamente, vc vai utilizar quando os dados não foram sensíveis (ex: nome, peso, busca estilo Google) vc NAO estará pedindo senha, cartão de credito, endereço, CEP, envio de fotos ou qualquer tipo de arquivo. Utilize GET quando os dados NÃO forem sensíveis e não precisar serem protegidos.
OBS: tem um limite, quando vc envia dados por GET, só pode enviar até 3 mil bytes (é aproximadamente 3 mil letras)

POST: dados sensíveis (o ideal é com HTTPS para proteger dados), os dados não aparecem na URL, mais de 3 mil bytes, envio de arquivos.

Input de texto:

	<input type="text" name=" " id=" ">

	Ex:	<p>
			<label for="iusu">Usuário: </label>
			<input type="text" name="usu" id="iusu">
	       </p>


Input de senha:

	<input type="password" name=" " id=" ">

	Ex:	<p>
            		<label for="isen">Senha: </label>
            		<input type="password" name="sen" id="isen">
        	</p>


Input para limpar formulário:

	<input type="reset" value=" ">

	Ex:	<p>
            		<input type="reset" value="Limpar">
        	</p>


Criar campo de preenchimento obrigatório:

	- Usar no input o parâmetro: required

	Ex:	<input type="text" name="usu" id="iusu" required>
	
		<input type="password" name="sen" id="isen" required>


Tamanho mínimo e máximo de caracteres:

	minlength=" "		maxlength=" "

	Ex:	<input type="text" name="usu" id="iusu" required minlength="5" maxlength="15">

		<input type="password" name="sen" id="isen" required minlength="8" maxlength="20">


Largura da caixa de texto (em nº de caracteres):

	size=" "

	Ex:	 <input type="text" name="usu" id="iusu" required minlength="5" maxlength="15"  size="10">

		<input type="password" name="sen" id="isen" required minlength="8" maxlength="20" size="8">


Usando placeholder (dica de preenchimento):

	placeholder=" "

	Ex:	<input type="text" name="usu" id="iusu" required minlength="5" maxlength="15" size="10" placeholder="nome do  
                usuário">


		<input type="password" name="sen" id="isen" required minlength="8" maxlength="20" size="12" placeholder="mínimo 
                8 letras">



Autocomplete dentro do input (informação do que será preenchido):

	1) Dentro da tag <form>, devemos ter autocomplete="on";
	2) Dentro do input, inserir mais um autocomplete=" ". Nesse caso teremos mais opções
	de preenchimento (ex: nickname, username, organization, current password,...).

   Ex:   <form action="cadastro.php" method="post" autocomplete="on">
	           <p>
          	        <label for="iusu">Usuário: </label>
	                <input type="text" name="usu" id="iusu" required minlength="5" maxlength="15" size="10" placeholder="nome do 
                         usuário" autocomplete="username">

	          </p>
	  </form>

TIPOS DE INPUT PARA FORMULÁRIOS:

number:

O input do tipo number cria uma caixa para que o usuário possa digitar números... Letras não são aceitas nesse input. O elemento é mostrado como uma caixa de edição de uma linha que só aceita a entrada de números (ela também aceita a entrada dos caracteres "sinal de menos e mais", "vírgula" e "ponto")... 

A caixa desse input também possui "botões giratórios" (setas de passo para cima e para baixo) que permitem que o usuário aumente ou diminua o valor numérico usando o mouse. A forma com que esses botões são exibidos depende também do navegador do usuário, pode variar entre os navegadores.

Obs.: No caso das dicas por placeholder, elas aparecem normalmente na caixa desse input, mesmo que seja uma frase (letras).

month:

O input do tipo month cria uma caixa que permite que o usuário insira um mês e um ano. O elemento é mostrado como uma caixa de edição de uma linha que aceita um mês e um ano.

A caixa desse input também possui um pequeno menu, que pode ser aberto e permiti escolher o mês e o ano com o mouse através de uma interface com botões giratórios e um calendário. A forma com que esse menu é exibido depende também do navegador do usuário, pode variar entre os navegadores.

Obs.: Quando o dado desse tipo de input é enviado para o servidor, sua sintaxe (sintaxe = forma como é escrito) é a seguinte: yyyy-mm 

date:

O input do tipo date cria uma caixa que permite que o usuário insira um dia, mês e ano... Uma data completa. O elemento é mostrado como uma caixa de edição de uma linha que aceita um dia, mês e ano.

A caixa desse input também possui um pequeno menu, que pode ser aberto e permiti escolher o dia/mês/ano com o mouse através de uma interface com botões giratórios e um calendário. A forma com que esse menu é exibido depende também do navegador do usuário, pode variar entre os navegadores.

Obs.: Quando o dado desse tipo de input é enviado para o servidor, sua sintaxe (sintaxe = forma como é escrito) é a seguinte: yyyy-mm-dd

time:

O input do tipo time cria uma caixa que permite que o usuário insira uma hora. O elemento é mostrado como uma caixa de edição de uma linha que aceita horas e minutos (opcionalmente segundos).

A caixa desse input também possui um pequeno menu, que pode ser aberto e permiti escolher a hora e o minuto com o mouse através de uma interface com botões giratórios. A forma com que esse menu é exibido depende também do navegador do usuário, pode variar entre os navegadores.

Obs.: Quando o dado desse tipo de input é enviado para o servidor, sua sintaxe (sintaxe = forma como é escrito) é a seguinte: hh:mm

ATRIBUTOS PRÓPRIOS MAIS USADOS PARA OS INPUTS DESCRITOS ACIMA:

Tenha em mente que nem todo atributo funciona em todos os componentes de entrada (inputs), por isso é importante que você sempre vá treinando e testando conforme a sua necessidade.

min:

Você pode usar esse atributo para estabelecer um valor mínimo que é aceitável e válido para o respectivo input. Por exemplo: Usar o atributo min com o valor 8 (min="8") no input number, especificando que o conteúdo numérico deva ter um valor mínimo igual a 8. Dessa forma, o usuário não poderá executar a submissão do formulário até inserir um número que atenda essa condição (que seja igual ou maior que 8). Obs.: Caso o user insira um conteúdo com um valor menor do que o determinado, um pequeno balão embaixo do campo alertando o valor mínimo aceito aparece.

Nota: Não confunda o atributo "minlength" com o "min". O atributo minlength serve para literalmente estabelecer um tamanho mínimo aceitável em quantidade de caracteres para o conteúdo de um input. Já o atributo min serve para estabelecer um valor mínimo aceitável no que se refere ao valor do conteúdo propriamente dito.

O atributo "min" é válido para os inputs do tipo number, date, month, time e mais alguns outros (serve para inputs numéricos de forma geral)... 

Para cara um desses inputs, a sintaxe do VALOR do atributo muda (sintaxe = forma como é escrito). Segue um exemplo:

Sintaxe do VALOR do atributo "min" para um input do tipo date: yyyy-mm-dd
Sintaxe do VALOR do atributo "min" para um input do tipo month: yyyy-mm
Sintaxe do VALOR do atributo "min" para um input do tipo time: hh:mm
Sintaxe do VALOR do atributo "min" para um input do tipo number: número mínimo

Ao usar o atributo min, certifique-se de que esse requisito mínimo seja compreendido pelo usuário. Fornecer instruções no <label> ou pelo placeholder pode ser suficiente.

max:

Você pode usar esse atributo para estabelecer um valor máximo que é aceitável e válido para o respectivo input. Por exemplo: Usar o atributo max com o valor 15 (max="15") no input number, 
especificando que o conteúdo numérico deva ter um valor de no máximo 15. Dessa forma, o usuário não poderá executar a submissão do formulário até inserir um número que atenda essa condição (que possua um valor de no máximo 15). Obs.: Caso o user insira um conteúdo com um valor maior do que o determinado, um pequeno balão embaixo do campo alertando o valor máximo aceito aparece.

Nota: Não confunda o atributo "maxlength" com o "max". O atributo maxlength serve para literalmente estabelecer um tamanho máximo aceitável em quantidade de caracteres para o conteúdo de um input. Já o atributo max serve para estabelecer um valor máximo aceitável no que se refere ao valor do conteúdo propriamente dito.

O atributo "max" é válido para os inputs do tipo number, date, month, time e mais alguns outros (serve para inputs numéricos de forma geral)... 

Para cara um desses inputs, a sintaxe do VALOR do atributo muda (sintaxe = forma como é escrito). Segue um exemplo:

Sintaxe do VALOR do atributo "max" para um input do tipo date: yyyy-mm-dd
Sintaxe do VALOR do atributo "max" para um input do tipo month: yyyy-mm
Sintaxe do VALOR do atributo "max" para um input do tipo time: hh:mm
Sintaxe do VALOR do atributo "max" para um input do tipo number: número máximo

Ao usar o atributo max, certifique-se de que esse requisito máximo seja compreendido pelo usuário. Fornecer instruções no <label> ou pelo placeholder pode ser suficiente.

step:

O atributo step é um número que especifica a granularidade (intervalo em unidades) à qual o valor de uma caixa input deve aderir. A step define o INTERVALO de passo ao clicar nos "botões giratórios" para cima e para baixo, ao mover um controle deslizante...

Por exemplo: Usar o atributo step com o valor 3 (step="3") no input number... Especificando que, ao clicarmos nos "botões giratórios", o conteúdo numérico da caixa deve AUMENTAR OU DIMINUIR de três em três unidades.

O atributo "step" é válido para os inputs do tipo number, date, month, time e mais alguns outros (serve para inputs numéricos de forma geral)... 

A sintaxe do valor do atributo é a mesma para todos esses inputs, que dever ser um número especificando o intervalo de passo Obs.: No caso do input time, o número deve ser referente aos segundos - se você quiser determinar um intervalor de três em três minutos por exemplo, deve fazer isso inserindo o valor "180" segundos (três minutos). Um valor menor do que 60 segundos no step para "time" permitirá que, além das horas e minutos, o formato do campo expanda para que o usuário também possa inserir os segundos.

Como valor de step, se você colocar um número inteiro (ex: 3). Isso fará com que apenas inteiros sejam inseridos na caixa. Se você quiser que a base de passo decorra em forma de um número quebrado (ex: 3.4, 3.5, 3.6 e por aí vai...), você deve inserir no atributo um valor numérico quebrado (ex: 0.1).

Se não for explicitamente incluída, a step assumirá por padrão o valor "1" para number, e "1" para algum tipo de unidade (minuto, semana, mês, dia) para os tipos de input de data/hora. Não podendo assim trabalhar com números quebrados... Para conseguir trabalhar com números quebrados e não precisar especificar um valor, você pode colocar no "step" o valor "any" (qualquer).

Atenção: O atributo step especifica um intervalo de unidades de avanço ou retorno para o valor de um input nos "botões giratórios" da caixa, entretanto o usuário ainda pode inserir valores de forma manual... E inclusive fazer isso inserindo valores que estão fora do intervalo de unidades determinado no atributo step. 

No entanto, ao fazer isso, o usuário não irá conseguir executar a submissão do formulário (Caso o user insira um conteúdo com um valor fora do intervalo especificado, um pequeno balão embaixo do campo alertando os valores válidos mais próximos aceitos aparece).

value:

Você pode usar esse atributo para estabelecer um valor inicial para um componente de entrada (input). Por exemplo: Usar o atributo value com o valor "10" (value="10") no input number, especificando que o conteúdo inicial da caixa deve ser 10. Dessa forma, ao abrir a página, o input já será carregado com esse valor preenchido no formulário.

Nota: Utilizar o atributo "value" torna a execução do atributo "placeholder" inválida... Isso ocorre porque o campo já será carregado preenchido, impedindo a visualização da dica.

O atributo "value" é válido para os inputs do tipo number, date, month, time e muitos outros (serve para inputs numéricos, mas também é válido para botões de opção, caixa de seleção, elementos de opção...) 

Para cara um desses inputs, a sintaxe do VALOR do atributo muda (sintaxe = forma como é escrito).


TIPOS DE INPUT PARA FORMULÁRIOS:

checkbox:

O input do tipo checkbox define uma caixa de seleção. A caixa de seleção é mostrada como uma pequena box quadrada que pode ser marcada pelo usuário com um clique (marca de verificação). 

As caixas de seleção são usadas para permitir que o usuário selecione uma ou mais opções dentre um número limitado de opções. A possibilidade de selecionar mais de um item AO MESMO TEMPO é uma característica fundamental do input checkbox. 

Sendo que somente os valores das caixas marcadas pelo usuário que serão enviados para o back-end quando a submissão do form for executada.

Dependendo do seu projeto, você pode trabalhar com uma ou mais caixas de checagem no seu formulário. A quantidade de caixas de checagem (opções) contidas no seu form vai depender da necessidade da sua aplicação.
 
O checkbox é um input de entrada como qualquer outro, portanto ele também precisa de uma label. Geralmente, para esse tipo de controle, no HTML nós inserimos o código do input ANTES do código da label, dessa forma a caixa de seleção fica na frente da label... 

No entanto, você também pode fazer o inverso e inserir o código do input após o código da label, posicionando a label na frente da caixa de seleção. 

Atenção: No input checkbox, os atributos "name" e "id" também devem ser configurados normalmente... No entanto, quando você tem mais de um checkbox no seu form e essas caixas de seleção representam diferentes opções dentro de um mesmo contexto, é recomentado atribuir a mesma nomenclatura para os atributos "name" dessas caixas de seleção, assim especificamos que essas boxes são de um mesmo grupo e portanto elas representam diferentes opções dentro de um mesmo assunto. Assim quando o usuário selecionar as opções de seu interesse, esses dados serão enviados para o servidor identificados com o mesmo nome, indicando que fazem parte de um mesmo grupo checkbox.

Dessa forma, os atributos "name" são sempre iguais para cada grupo de checkbox... Por exemplo: Se no seu form você tiver DOIS GRUPOS de checkbox, para dois tipos de informações que não são correlacionadas, aí sim um desses grupos vai ter um name e o outro grupo um name diferente, desvinculando os grupos (já o id é sempre único para cada checkbox individualmente). Sendo que o VÍNCULO entre o componente checkbox e sua respectiva label também deve ser estabelecido.

Uma outra característica importantíssima do input checkbox: Como sabemos, diferentemente de outros inputs, no checkbox o usuário não insere um dado digitando, ele simplesmente marca a opção que lhe atende...

Dessa maneira, para o funcionamento correto de uma caixa de seleção, é necessário que especifiquemos um atributo "value" para a mesma... (insira o value dentro da tag do input)

Determinando assim o valor (DADO) que aquela caixa de seleção REPRESENTA. O conteúdo contido nesse value que será enviado para o servidor no par nome-valor na hora da submissão do form (num checkbox: par nome-valor = atributos 'name' e 'value' respectivamente).

Obs.: Se você não definir um atributo value para o checkbox, o dado que será enviado contido no par nome-valor será um dado genérico "on". 

Segue um exemplo de código com inputs do tipo checkbox:

<form action="cadastro.php" method="get">
    <fieldset>
       <legend>Qual dessas é a sua linguagem de programação preferida?</legend> 
       
       <input type="checkbox" name="linguagem" id="js" value="JavaScript">
       <label for="js">JavaScript</label>

       <input type="checkbox" name="linguagem" id="php" value="PHP">
       <label for="php">PHP</label>

       <input type="checkbox" name="linguagem" id="python" value="Python"> 
       <label for="python">Python</label>
    </fieldset>
</form>

Dessa forma, o checkbox ou caixa de seleção nada mais é que um tipo de campo que já contém informações predefinidas e que o usuário deverá marcar, dispondo da possibilidade de ativar e desativar valores individuais... Tendo a opção de selecionar nenhuma, uma ou mais caixas (somente os valores das caixas marcadas que serão enviados para o back-end).

radio:

O input do tipo radio define um radio botton (botão de rádio). O botão de rádio é mostrado como um pequeno círculo que pode ser selecionado pelo usuário com um clique. Esse elemento geralmente é usado em grupos (radio groups)... Ou seja, vários botões de rádio juntos formam um radio group (grupo).

Os radio buttons são usados para permitir que o usuário selecione uma opção dentre um número limitado de opções. A possibilidade de selecionar APENAS UM ITEM dentre os disponíveis em um grupo é uma característica fundamental do input radio. Ao clicar em uma opção quando outra já está marcada, faz com que aquela opção marcada se desmarque automaticamente. Você pode ter vários grupos distintos de radio buttons no mesmo formulário, podendo fazer a seleção de apenas um item em cada um desses grupos.

Nota: Uma característica peculiar do input radio é que quando uma opção é selecionada, se clicarmos novamente, a seleção não sai... Dentro de um grupo, você até pode clicar em outra opção para desmarcar a atual, mas a partir do momento que uma opção é selecionada, não é mais possível deixar as opções do grupo em branco novamente sem ter que recarregar a página (fora isso a função do input "reset" também consegue deixar as opções em branco novamente). Isso aparentemente ocorre porque os radio buttons teoricamente foram concebidos para não serem deixados em branco.

Sendo que somente o valor do botão selecionado pelo usuário que será enviado para o back-end quando a submissão do form for executada.

Dependendo do seu projeto, você pode trabalhar com um ou mais botões de rádio no seu formulário. A quantidade de radio buttons (opções) contidas no seu form vai depender da necessidade da sua aplicação.

O radio é um input de entrada como qualquer outro, portanto ele também precisa de uma label. Geralmente, para esse tipo de controle, no HTML nós inserimos o código do input ANTES do código da label, dessa forma a caixa de seleção fica na frente da label... 

No entanto, você também pode fazer o inverso e inserir o código do input após o código da label, posicionando a label na frente da caixa de seleção. 

Atenção: No input radio, os atributos "name" e "id" também devem ser configurados normalmente... No entanto, quando você tem mais de um radio button no seu form e esses botões representam diferentes opções dentro de um mesmo contexto, é obrigatório atribuir a mesma nomenclatura para os atributos "name" desses radio buttons, assim especificamos que esses botões são de um mesmo grupo e portanto eles representam diferentes opções dentro de um mesmo assunto.
 
No caso dos radio buttons, é muito importante que você faça como foi orientado acima e atribua a mesma nomenclatura para os atributos "name", definindo um grupo. A característica fundamental desse tipo de input é que dentre as opções disponíveis, o usuário só possa escolher uma... Entretanto, se você não definir uma mesma nomenclatura para os atributos "name" dos inputs que supostamente formam aquele grupo, a funcionalidade de escolher apenas uma opção é comprometida e anulada (passando a poder escolher 'mais de uma' opção), visto que o sistema considera esses inputs com names diferentes como grupos diferentes.

Dessa forma, os atributos "name" são sempre iguais para cada grupo de radio buttons... Por exemplo: Se no seu form você tiver DOIS GRUPOS de radio buttons, para dois tipos de informações que não são correlacionadas, aí sim um desses grupos vai ter um name e o outro grupo um name diferente, desvinculando os grupos (já o id é sempre único para cada radio button individualmente). Sendo que o VÍNCULO entre o componente radio e sua respectiva label também deve ser estabelecido.

Uma outra característica importantíssima do input radio: Como sabemos, diferentemente de outros inputs, no radio o usuário não insere um dado digitando, ele simplesmente seleciona a opção que lhe atende...

Dessa maneira, para o funcionamento correto de um radio button, é necessário que especifiquemos um atributo "value" para a mesmo... (insira o value dentro da tag do input)

Determinando assim o valor (DADO) que aquele radio button REPRESENTA. O conteúdo contido nesse value que será enviado para o servidor no par nome-valor na hora da submissão do form (num radio: par nome-valor = atributos 'name' e 'value' respectivamente).

Obs.: Se você não definir um atributo value para o radio, o dado que será enviado contido no par nome-valor será um dado genérico "on". 

Segue um exemplo de código com inputs do tipo radio:

<form action="cadastro.php" method="get">
    <fieldset>
        <legend>Escolha a opção que lhe atende:</legend>
                
        <input type="radio" name="opcao" id="masculino" value="M">
        <label for="masculino">Masculino</label>

        <input type="radio" name="opcao" id="feminino" value="F">
        <label for="feminino">Feminino</label>
    </fieldset>
</form>

Dessa forma, o radio ou botão de rádio nada mais é que um tipo de campo que já contém informações predefinidas e que o usuário deverá marcar... Tendo a opção de selecionar nenhuma ou uma caixa por grupo (somente o valor da caixa marcada que será enviado para o back-end).